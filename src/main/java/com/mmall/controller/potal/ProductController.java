package com.mmall.controller.potal;import com.github.pagehelper.PageInfo;import com.mmall.common.ServerResponse;import com.mmall.service.IProductService;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.*;import java.io.UnsupportedEncodingException;/** * @author YaningLiu * @date 2018/9/10/ 12:02 */@Controller@RequestMapping("/product")public class ProductController {    private final IProductService productService;    @Autowired    public ProductController(IProductService productService) {        this.productService = productService;    }    @RequestMapping("/detail.do")    @ResponseBody    public ServerResponse getDetail(Integer productId) {        return productService.getDetail(productId);    }    @RequestMapping(value = "/{productId}", method = RequestMethod.GET)    @ResponseBody    public ServerResponse getDetailRESTFul(@PathVariable Integer productId) {        return productService.getDetail(productId);    }    @RequestMapping("/list.do")    @ResponseBody    public ServerResponse<PageInfo> productList(@RequestParam(required = false) String keyword,                                                @RequestParam(required = false) Integer categoryId,                                                @RequestParam(required = false) String orderBy,                                                @RequestParam(defaultValue = "1") Integer pageNum,                                                @RequestParam(defaultValue = "30") Integer pageSize) {        // xml中配置的过滤器只对post方式提交的有效，get提交的中文数据需要重新编码，或者设置tomcat插件的urlencoding=UTF-8,但是不建议这么做。        try {            if (StringUtils.isNotEmpty(keyword)) {                keyword = new String(keyword.getBytes("iso8859-1"), "UTF-8");            }        } catch (UnsupportedEncodingException e) {            e.printStackTrace();        }        return productService.getProductByKeywordCategory(keyword, categoryId, pageNum, pageSize, orderBy);    }    @RequestMapping(value = "/keyword/{keyword}/{pageNum}/{pageSize}/{orderBy}", method = RequestMethod.GET)    @ResponseBody    public ServerResponse<PageInfo> restFulProductList(@PathVariable(value = "keyword") String keyword,                                                       @PathVariable(value = "pageNum") Integer pageNum,                                                       @PathVariable(value = "pageSize") Integer pageSize,                                                       @PathVariable(value = "orderBy") String orderBy) {        try {            if (StringUtils.isNotEmpty(keyword)) {                keyword = new String(keyword.getBytes("iso8859-1"), "UTF-8");            }        } catch (UnsupportedEncodingException e) {            e.printStackTrace();        }        if (pageNum == null) {            pageNum = 1;        }        if (pageSize == null) {            pageSize = 10;        }        if (StringUtils.isBlank(orderBy)) {            orderBy = "price_asc";        }        return productService.getProductByKeywordCategory(keyword, null, pageNum, pageSize, orderBy);    }    @RequestMapping(value = "/category/{categoryId}/{pageNum}/{pageSize}/{orderBy}", method = RequestMethod.GET)    @ResponseBody    public ServerResponse<PageInfo> restFulProductList(@PathVariable(required = false) Integer categoryId,                                                       @PathVariable(required = false) String orderBy,                                                       @PathVariable Integer pageNum,                                                       @PathVariable Integer pageSize) {        if (pageNum == null) {            pageNum = 1;        }        if (pageSize == null) {            pageSize = 10;        }        if (StringUtils.isBlank(orderBy)) {            orderBy = "price_asc";        }        return productService.getProductByKeywordCategory("", categoryId, pageNum, pageSize, orderBy);    }}