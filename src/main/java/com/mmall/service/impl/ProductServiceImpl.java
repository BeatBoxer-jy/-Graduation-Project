package com.mmall.service.impl;import com.github.pagehelper.PageHelper;import com.github.pagehelper.PageInfo;import com.google.common.collect.Lists;import com.mmall.common.Const;import com.mmall.common.ResponseCode;import com.mmall.common.ServerResponse;import com.mmall.dao.CategoryMapper;import com.mmall.dao.ProductMapper;import com.mmall.pojo.Category;import com.mmall.pojo.Product;import com.mmall.service.ICategoryService;import com.mmall.service.IProductService;import com.mmall.util.DateTimeUtil;import com.mmall.util.PropertiesUtil;import com.mmall.vo.ProductDetailVo;import com.mmall.vo.ProductListVo;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.List;/** * @author YaningLiu * @date 2018/9/9/ 9:43 */@Servicepublic class ProductServiceImpl implements IProductService {    @Autowired    private ProductMapper productMapper;    @Autowired    private CategoryMapper categoryMapper;    @Autowired    private ICategoryService categoryService;    @Override    public ServerResponse<String> saveOrUpDateProduct(Product product) {        if (product == null) {            return ServerResponse.createByErrorMsg("新增或更新产品参数不正确");        }        if (StringUtils.isNotBlank(product.getSubImages())) {            String[] subImageArray = product.getSubImages().split(",");            product.setMainImage(subImageArray[0]);        }        if (product.getId() != null) {            int rowCount = productMapper.updateByPrimaryKey(product);            if (rowCount > 0) {                return ServerResponse.createBySuccess("更新产品成功");            }            return ServerResponse.createBySuccess("更新产品失败");        } else {            product.setStatus(1);            int rowCount = productMapper.insert(product);            if (rowCount > 0) {                return ServerResponse.createBySuccess("新增产品成功");            }            return ServerResponse.createBySuccess("新增产品失败");        }    }    @Override    public ServerResponse<String> setProductStatus(Integer productId, Integer status) {        if (productId == null || status == null) {            ResponseCode errorCode = ResponseCode.ILLEGAL_ARGUMENT;            return ServerResponse.createByErrorCodeMessage(errorCode.getCode(), errorCode.getDesc());        }        Product target = new Product();        target.setId(productId);        target.setStatus(status);        int rowCount = productMapper.updateByPrimaryKeySelective(target);        if (rowCount > 0) {            return ServerResponse.createBySuccess("修改产品销售状态成功");        }        return ServerResponse.createByErrorMsg("修改产品销售状态失败");    }    @Override    public ServerResponse<ProductDetailVo> getDetail(Integer productId) {        if (productId == null) {            ResponseCode errorCode = ResponseCode.ILLEGAL_ARGUMENT;            return ServerResponse.createByErrorCodeMessage(errorCode.getCode(), errorCode.getDesc());        }        Product product = productMapper.selectByPrimaryKey(productId);        if (product == null || product.getStatus() != Const.ProductStatusEnum.ON_SALE.getCode()) {            return ServerResponse.createByErrorMsg("该商品已经下架或删除");        }        ProductDetailVo vo = assembleProductDetailVo(product);        return ServerResponse.createBySuccess(vo);    }    @Override    public ServerResponse<PageInfo> getProducts(Integer pageNum, Integer pageSize) {        PageHelper.startPage(pageNum, pageSize);        List<Product> products = productMapper.selectAllProducts();        // 处理一下，list不需要商品的详情，        // ProductListVo：volue object，只取一些关键的信息        List<ProductListVo> productListVos = Lists.newArrayList();        for (Product item : products) {            productListVos.add(assembleProductListVo(item));        }        // 取分页信息        PageInfo pageInfo = new PageInfo<Product>(products);        pageInfo.setList(productListVos);        return ServerResponse.createBySuccess(pageInfo);    }    @Override    public ServerResponse<PageInfo> searchProduct(String productName, Integer productId, int pageNum, int pageSize) {        PageHelper.startPage(pageNum, pageSize);        if (StringUtils.isNotBlank(productName)) {            productName = new StringBuilder().append("%").append(productName).append("%").toString();        }        List<Product> productList = productMapper.selectByNameAndProductId(productName, productId);        List<ProductListVo> productListVoList = Lists.newArrayList();        for (Product productItem : productList) {            ProductListVo productListVo = assembleProductListVo(productItem);            productListVoList.add(productListVo);        }        PageInfo pageResult = new PageInfo(productList);        pageResult.setList(productListVoList);        return ServerResponse.createBySuccess(pageResult);    }    @Override    public ServerResponse<ProductDetailVo> managerGetDetail(Integer productId) {        if (productId == null) {            ResponseCode errorCode = ResponseCode.ILLEGAL_ARGUMENT;            return ServerResponse.createByErrorCodeMessage(errorCode.getCode(), errorCode.getDesc());        }        Product product = productMapper.selectByPrimaryKey(productId);        if (product == null) {            return ServerResponse.createByErrorMsg("该商品已经删除");        }        ProductDetailVo vo = assembleProductDetailVo(product);        return ServerResponse.createBySuccess(vo);    }    @Override    public ServerResponse<PageInfo> getProductByKeywordCategory(String keyword, Integer categoryId, int pageNum, int pageSize, String orderBy) {        // 两个参数都没传，直接返回一个错误的响应。        if (StringUtils.isBlank(keyword) && categoryId == null) {            ResponseCode code = ResponseCode.ILLEGAL_ARGUMENT;            return ServerResponse.createByErrorCodeMessage(code.getCode(), code.getDesc());        }        List categoryIds = Lists.newArrayList();        // 分类id不为空        if (categoryId != null) {            Category category = categoryMapper.selectByPrimaryKey(categoryId);            if (category == null && StringUtils.isBlank(keyword)) {                //这个父分类不存在的，并且还没有关键字,这个时候返回一个空的结果集,不报错                PageHelper.startPage(pageNum, pageSize);                PageInfo pageInfo = new PageInfo(Lists.newArrayList());                return ServerResponse.createBySuccess(pageInfo);            }            // 若传递的分类Id是一个父分类的话，进行一个递归，获取这个父分类下所有的分类id            categoryIds.addAll(categoryService.getAllCategoryIdById(categoryId).getData());        }        //查询的关键字不为空，进行拼接        if (StringUtils.isNotBlank(keyword)) {            keyword = "%" + keyword + "%";        }        //传递了所需的参数（参数可能是不安全的），设置一个分页        PageHelper.startPage(pageNum, pageSize);        //若指定了排序字段，进行一个动态排序处理        if (StringUtils.isNotBlank(orderBy)) {            if (Const.PRODUCT_SORT_COLUMN.contains(orderBy)) {                //使用pagehelper 的orderBy方法进行排序，pagehelper使用的就是aop，                //规则是：PageHelper.orderBy("字段 asc/desc")；记得空格                //规定了前端传递的排序格式是"price_asc"这种格式的                PageHelper.orderBy(orderBy.replace('_',' '));            }        }        /*        进行查询，        情况1:categoryId有效，keyword是空串            直接将keyword置为null，不进行keyword的查询        情况2:keyword有效，categoryId是个无效的分类id            直接将id置为null，不进行categoryId的查询         */        List<Product> productList = productMapper.selectByNameAndCategoryIds(StringUtils.isBlank(keyword) ? null : keyword, categoryIds.size() == 0 ? null : categoryIds);        //对查询出的结果进行处理，        List<ProductListVo> productListVos = Lists.newArrayList();        for (Product product : productList) {            ProductListVo productListVo = assembleProductListVo(product);            productListVos.add(productListVo);        }        PageInfo pageInfo = new PageInfo(productList);        pageInfo.setList(productListVos);        return ServerResponse.createBySuccess(pageInfo);    }    private ProductDetailVo assembleProductDetailVo(Product product) {        ProductDetailVo vo = new ProductDetailVo();        vo.setId(product.getId());        vo.setCategoryId(product.getCategoryId());        vo.setName(product.getName());        vo.setSubtitle(product.getSubtitle());        vo.setMainImage(product.getMainImage());        vo.setSubImages(product.getSubImages());        vo.setDetail(product.getDetail());        vo.setPrice(product.getPrice());        vo.setStock(product.getStock());        vo.setStatus(product.getStatus());        vo.setImageHost(PropertiesUtil.getProperty("ftp.server.http.prefix", "http://img.happymmall.com/"));        // 存储父分类的id        Category category = categoryMapper.selectByPrimaryKey(product.getCategoryId());        if (category == null) {            //默认根节点            vo.setParentCategoryId(0);        } else {            vo.setParentCategoryId(category.getParentId());        }        vo.setCreateTime(DateTimeUtil.dateToStr(product.getCreateTime()));        vo.setUpdateTime(DateTimeUtil.dateToStr(product.getUpdateTime()));        return vo;    }    private ProductListVo assembleProductListVo(Product product) {        ProductListVo productListVo = new ProductListVo();        productListVo.setId(product.getId());        productListVo.setName(product.getName());        productListVo.setCategoryId(product.getCategoryId());        productListVo.setImageHost(PropertiesUtil.getProperty("ftp.server.http.prefix", "http://img.happymmall.com/"));        productListVo.setMainImage(product.getMainImage());        productListVo.setPrice(product.getPrice());        productListVo.setSubtitle(product.getSubtitle());        productListVo.setStatus(product.getStatus());        return productListVo;    }}